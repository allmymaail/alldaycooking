environ({'ALLUSERSPROFILE': 'C:\\ProgramData', 'APPDATA': 'C:\\Users\\dynamic\\AppData\\Roaming', 'COMMONPROGRAMFILES': 'C:\\Program Files\\Common Files', 'COMMONPROGRAMFILES(X86)': 'C:\\Program Files (x86)\\Common Files', 'COMMONPROGRAMW6432': 'C:\\Program Files\\Common Files', 'COMPUTERNAME': 'HOST51', 'COMSPEC': 'C:\\Windows\\system32\\cmd.exe', 'DRIVERDATA': 'C:\\Windows\\System32\\Drivers\\DriverData', 'HOMEDRIVE': 'C:', 'HOMEPATH': '\\Users\\dynamic', 'LOCALAPPDATA': 'C:\\Users\\dynamic\\AppData\\Local', 'LOGONSERVER': '\\\\HOST51', 'NUMBER_OF_PROCESSORS': '4', 'ONEDRIVE': 'C:\\Users\\dynamic\\OneDrive', 'ONEDRIVECONSUMER': 'C:\\Users\\dynamic\\OneDrive', 'OS': 'Windows_NT', 'PATH': 'C:\\Program Files (x86)\\Common Files\\Oracle\\Java\\javapath;C:\\Users\\dynamic\\AppData\\Roaming\\ActiveState\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x86;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x64;C:\\Program Files;C:\\MinGW\\bin;C:\\Program Files\\dotnet\\;C:\\Program Files (x86)\\Mono\\bin;C:\\Program Files\\nodejs\\;F:\\vidEditor\\ShotcutInstallation\\Shotcut\\;C:\\Program Files\\WireGuard\\;F:\\2ads\\New folder\\Bento4-SDK-1-6-0-637.x86_64-microsoft-win32\\bin\\;C:\\Users\\dynamic\\Downloads\\PluralsightCourseDownloader\\;F:\\AppsHTML\\CGL\\eng\\GOFIle gopal ji\\vv\\vcpkg\\;C:\\Users\\dynamic\\Downloads\\Compressed\\upx-3.96-win32\\;C:\\Users\\dynamic\\Downloads\\Compressed\\upx-3.96-win64\\;C:\\Program Files\\Scripts\\;C:\\Program Files\\;C:\\Users\\dynamic\\AppData\\Local\\Microsoft\\WindowsApps;C:\\Users\\dynamic\\.dotnet\\tools;C:\\Users\\dynamic\\AppData\\Roaming\\npm;C:\\Program Files\\Fiddler;F:\\2ads\\DeepLearnPluralSight\\New folder\\mp4boxx\\GPAC', 'PATHEXT': '.COM;.EXE;.BAT;.CMD;.VBS;.VBE;.JS;.JSE;.WSF;.WSH;.MSC;.PL;.WPL', 'PATH_ORIGINAL': 'C:\\Users\\dynamic\\AppData\\Roaming\\ActiveState\\bin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;C:\\Windows\\System32\\OpenSSH\\;C:\\Program Files\\Git\\cmd;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x86;C:\\Program Files (x86)\\Intel\\OpenCL SDK\\2.0\\bin\\x64;C:\\Program Files\\NASM;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Community\\Common7\\Tools;C:\\Program Files;C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\BuildTools\\VC\\Tools\\MSVC\\14.16.27023\\bin\\HostX64\\x64;C:\\Program Files (x86)\\GUI Turbo Assembler\\BIN;C:\\MinGW\\bin;C:\\Program Files\\dotnet\\', 'PROCESSOR_ARCHITECTURE': 'AMD64', 'PROCESSOR_IDENTIFIER': 'Intel64 Family 6 Model 42 Stepping 7, GenuineIntel', 'PROCESSOR_LEVEL': '6', 'PROCESSOR_REVISION': '2a07', 'PROGRAMDATA': 'C:\\ProgramData', 'PROGRAMFILES': 'C:\\Program Files', 'PROGRAMFILES(X86)': 'C:\\Program Files (x86)', 'PROGRAMW6432': 'C:\\Program Files', 'PSMODULEPATH': 'C:\\Program Files\\WindowsPowerShell\\Modules;C:\\Windows\\system32\\WindowsPowerShell\\v1.0\\Modules', 'PUBLIC': 'C:\\Users\\Public', 'SEE_MASK_NOZONECHECKS': '1', 'SESSIONNAME': 'Console', 'SYSTEMDRIVE': 'C:', 'SYSTEMROOT': 'C:\\Windows', 'TEMP': 'C:\\Users\\dynamic\\AppData\\Local\\Temp', 'TMP': 'C:\\Users\\dynamic\\AppData\\Local\\Temp', 'USERDOMAIN': 'HOST51', 'USERDOMAIN_ROAMINGPROFILE': 'HOST51', 'USERNAME': 'dynamic', 'USERPROFILE': 'C:\\Users\\dynamic', 'WINDIR': 'C:\\Windows', '__COMPAT_LAYER': 'DetectorsMessageBoxErrors', 'TCL_LIBRARY': 'C:\\Users\\dynamic\\AppData\\Local\\Temp\\_MEI108762\\tcl', 'TK_LIBRARY': 'C:\\Users\\dynamic\\AppData\\Local\\Temp\\_MEI108762\\tk', 'SSL_CERT_FILE': 'C:\\Users\\dynamic\\AppData\\Local\\Temp\\_MEI108762\\certifi\\cacert.pem'})